# -*- coding: utf-8 -*-
"""
/***************************************************************************
 quickign
                                 A QGIS plugin
 QuickIGN
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-10
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Chloe Morgat
        email                : chloe.morgat@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject

from PyQt5.QtGui import QColor, QFont
from qgis.core import QgsFillSymbol, QgsSingleSymbolRenderer, QgsLineSymbol
from qgis.core import QgsTextFormat, QgsTextBufferSettings, QgsVectorLayerSimpleLabeling
from qgis.core import QgsPalLayerSettings
from qgis.core import QgsMarkerSymbol
from qgis.gui import QgsMapCanvas
import os.path
from os import path

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .QuickIGN_dockwidget import QuickIGNDockWidget
import matplotlib as pyplot


class QuickIGN:
    """QGIS Plugin Implementation."""
    
    layer = None
    
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas= iface.mapCanvas()

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuickIGN_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QuickIGN')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QuickIGN')
        self.toolbar.setObjectName(u'QuickIGN')

        #print "** INITIALIZING QuickIGN"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuickIGN', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/quickign/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'QuickIGN'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING QuickIGN"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD QuickIGN"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QuickIGN'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING QuickIGN"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QuickIGNDockWidget()
                
            # Mise en page de l'interface du Plugin :
            self.dockwidget.pushButton.setStyleSheet("color : #6CE152")
            
            #Connection des flux accessible par l'IGN aux checkbox : 
            self.dockwidget.Boxphoto.clicked.connect(self.affichePhotoAerienne)
            self.dockwidget.Boxplani.clicked.connect(self.affichePlaniIGN)
            self.dockwidget.Boxcadastre.clicked.connect(self.afficheCadastre)
            self.dockwidget.Boxbdortho.clicked.connect(self.afficheBdortho)
            self.dockwidget.Boxadminexpress.clicked.connect(self.afficheAdminexpress)
            
            #Connection du lien tapé par l'utilisateur au pushbutton : 
            self.dockwidget.pushButton.clicked.connect(self.chemin)
           

            self.dockwidget.checkBoxAdministratif.clicked.connect(self.ouvAdministratif)
            self.dockwidget.checkBoxAdresse.clicked.connect(self.ouvAdresse)
            self.dockwidget.checkBoxBati.clicked.connect(self.ouvBati)
            self.dockwidget.checkBoxHydro.clicked.connect(self.ouvHydro)
            self.dockwidget.checkBoxLieuNomme.clicked.connect(self.ouvLieuNomme)
            self.dockwidget.checkBoxOccupationDuSol.clicked.connect(self.ouvOccupationDuSol)
            self.dockwidget.checkBoxServiceEtActivite.clicked.connect(self.ouvServiceEtActivite)
            self.dockwidget.checkBoxTransport.clicked.connect(self.ouvTransport)
            self.dockwidget.checkBoxZoneRegle.clicked.connect(self.ouvZonereglementee)
           
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
    
    #Fonction permettant de récupérer le fichier BDTopo
    def chemin(self):
        self.url = self.dockwidget.lineEdit.text()
        
        #On efface la couche "Emprise du département" si elle existe
        if self.layer != None:
            QgsProject.instance().removeMapLayer(self.layer)
        
        #On créer la couche "Emprise du département"    
        self.layer = QgsVectorLayer(self.url + '/ADMINISTRATIF/DEPARTEMENT.shp', 'Emprise du département', 'ogr')
          
        #On l'associe à l'emprise de la prjection
        canvas = QgsMapCanvas()
        canvas.setExtent(self.layer.extent())
        
        #On l'ajoute au caneva
        QgsProject.instance().addMapLayer(self.layer)
        
        #On défini la transparence de la couche
        Layer = {'color': 'rgba(255,255,255,0.5)', 'size':'1', 'color_border' : 'rgba(255,255,255,0,5)', 'width_border': '0'}
        L = QgsFillSymbol.createSimple(Layer)
        
        #On ajoute les caractéristiques symbologiques à la couche
        self.layer.setRenderer(QgsSingleSymbolRenderer(L))
        
        #On zoom sur la couche "Emprise du département"
        self.iface.setActiveLayer(self.layer)
        self.iface.zoomToActiveLayer()


    
    #Fonction permattant d'aller chercher les différents flux WMS et WMTS accessible sur le site de l'IGN    
    def affichePhotoAerienne(self):
        print('test')
        #Si la Box "Photographie aérienne" est cochée :   
        if self.dockwidget.Boxphoto.isChecked():
            print('deja')
            #On relie la fonction a un flux spécifique, ici le flux photographie aérienne
            url = 'contextualWMSLegend=0&crs=EPSG:3857&dpiMode=7&featureCount=10&format=image/jpeg&'
            url = url + 'layers=ORTHOIMAGERY.ORTHOPHOTOS&styles=normal&tileMatrixSet=PM'
            wms_url = url + '&url=http://wxs.ign.fr/choisirgeoportail/wmts?SERVICE%3DWMTS%26VERSION%3D1.0.0%26REQUEST%3DGetCapabilities'
            rlayer = QgsRasterLayer(wms_url, 'Photographie', 'wms')
            QgsProject.instance().addMapLayer(rlayer)
            print (rlayer)
        
        #A l'inverse si elle est décochée :  
        else:
            print('else')
            for fond in QgsProject.instance().mapLayers().values():
                if fond.name() == "Photographie":
                    rlayer = fond
            print(rlayer.name())
            #On supprime la couche   
            QgsProject.instance().removeMapLayer(rlayer)
            self.canvas.refresh()
            
            #On réitère cette opération pour les quatres autres flux WMS (Plan IGN, Cadastre, BDOrtho, Adminexpress)
            
    def affichePlaniIGN(self):
        print('test')
        if self.dockwidget.Boxplani.isChecked():
            print('deja')
            url = 'contextualWMSLegend=0&crs=EPSG:3857&dpiMode=7&featureCount=10&format=image/png&'
            url = url + 'layers=GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2&styles=normal&tileMatrixSet=PM'
            wms_url = url + '&url=http://wxs.ign.fr/choisirgeoportail/geoportail/wmts?SERVICE%3DWMTS%26VERSION%3D1.0.0%26REQUEST%3DGetCapabilities'
            
            
            
            blayer = QgsRasterLayer(wms_url, 'Plan IGN', 'wms')
            QgsProject.instance().addMapLayer(blayer)
            print (blayer)
        
        else:
            print('else')
            for fond in QgsProject.instance().mapLayers().values():
                if fond.name() == "Plan IGN":
                    blayer = fond
                    print(blayer.name())
            QgsProject.instance().removeMapLayer(blayer)
            self.canvas.refresh()
            
    
    def afficheCadastre(self):
        if self.dockwidget.Boxcadastre.isChecked():
            url = 'contextualWMSLegend=0&crs=EPSG:3857&dpiMode=7&featureCount=10&format=image/png&'
            url = url + 'layers=CADASTRALPARCELS.PARCELLAIRE_EXPRESS&styles=PCI%20vecteur&tileMatrixSet=PM'
            wms_url = url + '&url=http://wxs.ign.fr/choisirgeoportail/geoportail/wmts?SERVICE%3DWMTS%26VERSION%3D1.0.0%26REQUEST%3DGetCapabilities'
            
            clayer = QgsRasterLayer(wms_url, 'Cadastre', 'wms')
            QgsProject.instance().addMapLayer(clayer)
            print (clayer)
       
        
        else:
            print('else')
            for fond in QgsProject.instance().mapLayers().values():
                if fond.name() == "Cadastre":
                    clayer = fond
                    print ('cadastre')
                    print(clayer.name())
            QgsProject.instance().removeMapLayer(clayer)
            self.canvas.refresh()
            
            
    def afficheBdortho(self):
        if self.dockwidget.Boxbdortho.isChecked():
            url='crs=EPSG:3857&dpiMode=7&format=image/png&layers=ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO&styles&url=https://wxs.ign.fr/choisirgeoportail/geoportail/r/wms'
            dlayer = QgsRasterLayer(url, 'Ortho50cm', 'wms')
            QgsProject.instance().addMapLayer(dlayer)
            print (dlayer)
        
        else:
            for fond in QgsProject.instance().mapLayers().values():
                if fond.name() == "Ortho50cm":
                    dlayer = fond
                    print(dlayer.name())
            QgsProject.instance().removeMapLayer(dlayer)
            self.canvas.refresh()
            
    
    def afficheAdminexpress(self):
        if self.dockwidget.Boxadminexpress.isChecked():
            url = 'crs=CRS:84&dpiMode=7&format=image/png&layers=LIMITES_ADMINISTRATIVES_EXPRESS.LATEST&styles&url=https://wxs.ign.fr/choisirgeoportail/geoportail/r/wms'
            elayer = QgsRasterLayer(url, 'Limites Administratives', 'wms')
            QgsProject.instance().addMapLayer(elayer)
            print (elayer)
        
        else:
            print('else')
            for fond in QgsProject.instance().mapLayers().values():
                if fond.name() == "Limites Administratives":
                    elayer = fond
            print(elayer.name())
            QgsProject.instance().removeMapLayer(elayer)
            self.canvas.refresh()



    
    #Fonction permattant d'aller chercher les différentes couches vecteurs accessibles sur le site de l'IGN
    def ouvAdministratif(self):
        #Si la Box "Administratif" est cochée :
        if self.dockwidget.checkBoxAdministratif.isChecked():
            #Si la couche "REGION.shp" existe:
            if path.exists(self.url + '/ADMINISTRATIF/REGION.shp'):
                #Attribution du nom "layer1_1" à la couche "REGION.shp"
                self.layer1_1 = QgsVectorLayer(self.url + '/ADMINISTRATIF/REGION.shp', 'Region', 'ogr')
                #Ajouter cette couche dans QGis:
                QgsProject.instance().addMapLayer(self.layer1_1)
                
            #On réitère cette opération pour les autres couches situées dans le dossier administratif 
            if path.exists(self.url + '/ADMINISTRATIF/COLLECTIVITE_TERRITORIALE.shp'):
                self.layer1_2 = QgsVectorLayer(self.url + '/ADMINISTRATIF/COLLECTIVITE_TERRITORIALE.shp', 'Collectivite territoriale', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_2)
            if path.exists(self.url + '/ADMINISTRATIF/DEPARTEMENT.shp'):
                self.layer1_3 = QgsVectorLayer(self.url + '/ADMINISTRATIF/DEPARTEMENT.shp', 'Departement', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_3)
            if path.exists(self.url + '/ADMINISTRATIF/ARRONDISSEMENT.shp'):
                self.layer1_4 = QgsVectorLayer(self.url + '/ADMINISTRATIF/ARRONDISSEMENT.shp', 'Arrondissement', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_4)
            if path.exists(self.url + '/ADMINISTRATIF/EPCI.shp'):
                self.layer1_5 = QgsVectorLayer(self.url + '/ADMINISTRATIF/EPCI.shp', 'ECPI', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_5)
            if path.exists(self.url + '/ADMINISTRATIF/COMMUNE.shp'):
                self.layer1_6 = QgsVectorLayer(self.url + '/ADMINISTRATIF/COMMUNE.shp', 'Commune', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_6)
            if path.exists(self.url + '/ADMINISTRATIF/COMMUNE_ASSOCIEE_OU_DELEGUEE.shp'):
                self.layer1_7 = QgsVectorLayer(self.url + '/ADMINISTRATIF/COMMUNE_ASSOCIEE_OU_DELEGUEE.shp', 'Commune associee', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_7)
            if path.exists(self.url + '/ADMINISTRATIF/CONDOMINIUM.shp'):
                self.layer1_8 = QgsVectorLayer(self.url + '/ADMINISTRATIF/CONDOMINIUM.shp', 'Condominium', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_8)
            if path.exists(self.url + '/ADMINISTRATIF/ARRONDISSEMENT_MUNICIPAL.shp'):
                self.layer1_9 = QgsVectorLayer(self.url + '/ADMINISTRATIF/ARRONDISSEMENT_MUNICIPAL.shp', 'Arrondissement municipal', 'ogr')
                QgsProject.instance().addMapLayer(self.layer1_9)
            
            #Application de la Symbologie de la fonction "SymboAdmin"
            self.SymboAdmi()
    
        #Si les box sont décochées :  
        else:
            #Si "layer1_1" est affiché sur QGIS 
            if hasattr(self, 'layer1_1'):
                # On supprime cette couche dans la légence
                QgsProject.instance().removeMapLayer(self.layer1_1)
            #Même procédé pour les autres couches
            if hasattr(self, 'layer1_2'):
                QgsProject.instance().removeMapLayer(self.layer1_2)
            if hasattr(self, 'layer1_3'):
                QgsProject.instance().removeMapLayer(self.layer1_3)
            if hasattr(self, 'layer1_4'):
                QgsProject.instance().removeMapLayer(self.layer1_4)
            if hasattr(self, 'layer1_5'):
                QgsProject.instance().removeMapLayer(self.layer1_5)
            if hasattr(self, 'layer1_6'):
                QgsProject.instance().removeMapLayer(self.layer1_6)
            if hasattr(self, 'layer1_7'):
                QgsProject.instance().removeMapLayer(self.layer1_7)
            if hasattr(self, 'layer1_8'):
                QgsProject.instance().removeMapLayer(self.layer1_8)
            if hasattr(self, 'layer1_9'):
                QgsProject.instance().removeMapLayer(self.layer1_9)
            
            #Permet de rafraîchir le canevas 
            self.canvas.refresh()
    
    
    #Fonction permettant d'appliquer une symbologie à différentes couches, ici la symbologie concerne le couches situées dans le dossier "Admninistratif"       
    def SymboAdmi(self):  
        #Création d'une symbologie pour un point 
        propsA = {'color': '#F6CECE', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        #Permet d'appliquer propsA sur QGis          
        A = QgsFillSymbol.createSimple(propsA)
        
        #Même procédé pour ces 8 points
        propsB = {'color': '#F5A9A9', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        B = QgsFillSymbol.createSimple(propsB)
        propsC = {'color': '#F78181', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        C = QgsFillSymbol.createSimple(propsC)
        propsD = {'color': '#FA5858', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        D = QgsFillSymbol.createSimple(propsD)
        propsE = {'color': '#FE2E2E', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        E = QgsFillSymbol.createSimple(propsE)
        propsF = {'color': '#EF3434', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        F = QgsFillSymbol.createSimple(propsF)
        propsG = {'color': '#B40404', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        G = QgsFillSymbol.createSimple(propsG)
        propsH = {'color': 'rgba(255,255,255,0.5)', 'size':'1', 'color_border' : '#FE642E', 'width_border': '1'}
        H = QgsFillSymbol.createSimple(propsH)
        propsI = {'color': 'rgba(255,255,255,0.5)', 'size':'1', 'color_border' : '#B40404', 'width_border': '1'}
        I = QgsFillSymbol.createSimple(propsI)
        
        #Si la couche layer1_1 est présente sur le canevas 
        if hasattr(self, 'layer1_1'):
            #Permet de connecter le layer1_1 à sa symbologie (A)
            self.layer1_1.setRenderer(QgsSingleSymbolRenderer(A))  
            #Permet de recharger la symbologie 
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_1.id())
        if hasattr(self, 'layer1_2'):
            self.layer1_2.setRenderer(QgsSingleSymbolRenderer(B))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_2.id())
        if hasattr(self, 'layer1_3'):
            self.layer1_3.setRenderer(QgsSingleSymbolRenderer(C))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_3.id())
        if hasattr(self, 'layer1_4'):
            self.layer1_4.setRenderer(QgsSingleSymbolRenderer(D))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_4.id())
        if hasattr(self, 'layer1_5'):
            self.layer1_5.setRenderer(QgsSingleSymbolRenderer(E))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_5.id())
        if hasattr(self, 'layer1_6'):
            self.layer1_6.setRenderer(QgsSingleSymbolRenderer(F))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_6.id())
        if hasattr(self, 'layer1_7'):
            self.layer1_7.setRenderer(QgsSingleSymbolRenderer(G))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_7.id())
        if hasattr(self, 'layer1_8'):
            self.layer1_8.setRenderer(QgsSingleSymbolRenderer(H))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_8.id())
        if hasattr(self, 'layer1_9'):
            self.layer1_9.setRenderer(QgsSingleSymbolRenderer(I))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer1_9.id())
 
    def ouvAdresse(self):
        if self.dockwidget.checkBoxAdresse.isChecked():
            if path.exists(self.url + '/ADRESSES/VOIE_NOMMEE.shp'):
                self.layer2_1 = QgsVectorLayer(self.url + "/ADRESSES/VOIE_NOMMEE.shp", 'Voie nomme', 'ogr')
                QgsProject.instance().addMapLayer(self.layer2_1)
            if path.exists(self.url + '/ADRESSES/ADRESSE.shp'):
                self.layer2_2 = QgsVectorLayer(self.url + "/ADRESSES/ADRESSE.shp", 'Adresse', 'ogr')
                QgsProject.instance().addMapLayer(self.layer2_2)
            self.SymboAdresse()

        else:
            if hasattr(self, 'layer2_1'):
                QgsProject.instance().removeMapLayer(self.layer2_1)
            if hasattr(self, 'layer2_2'):
                QgsProject.instance().removeMapLayer(self.layer2_2)
            self.canvas.refresh()
           
    def SymboAdresse(self):
        #
        lineA = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#FF8000'})
        #
        if hasattr(self, 'layer2_1'):
            self.layer2_1.renderer().setSymbol(lineA)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer2_1.id())
       
        #
        symbolB = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#E482ED', 'color_border' : '0,0,0', 'width_border': '0,3'})
        #
        if hasattr(self, 'layer2_2'):
            self.layer2_2.renderer().setSymbol(symbolB)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer2_2.id())
           
    def ouvBati(self):
        #
        if self.dockwidget.checkBoxBati.isChecked() :
            #
            if path.exists(self.url + '/BATI/BATIMENT.shp'):
                self.layer3_1 = QgsVectorLayer(self.url + "/BATI/BATIMENT.shp", 'Batiment ', 'ogr')  
                QgsProject.instance().addMapLayer(self.layer3_1)
            if path.exists(self.url + '/BATI/CIMETIERE.shp'):
                self.layer3_2 = QgsVectorLayer(self.url + "/BATI/CIMETIERE.shp", "Cimetière", 'ogr')  
                QgsProject.instance().addMapLayer(self.layer3_2)
            if path.exists(self.url + '/BATI/RESERVOIR.shp'):
                self.layer3_3 = QgsVectorLayer(self.url + "/BATI/RESERVOIR.shp", 'Réservoir ', 'ogr')
                QgsProject.instance().addMapLayer(self.layer3_3)
            if path.exists(self.url + '/BATI/TERRAIN_DE_SPORT.shp'):
                self.layer3_4 = QgsVectorLayer(self.url + "/BATI/TERRAIN_DE_SPORT.shp", 'Terrain de sport ', 'ogr')
                QgsProject.instance().addMapLayer(self.layer3_4)
            if path.exists(self.url + '/BATI/CONSTRUCTION_SURFACIQUE.shp'):
                self.layer3_5 = QgsVectorLayer(self.url + "/BATI/CONSTRUCTION_SURFACIQUE.shp", "Construction surfacique", 'ogr')
                QgsProject.instance().addMapLayer(self.layer3_5)
            if path.exists(self.url + '/BATI/CONSTRUCTION_LINEAIRE.shp'):            
                self.layer3_6 = QgsVectorLayer(self.url + "/BATI/CONSTRUCTION_LINEAIRE.shp", 'Construction Linéaire', 'ogr')  
                QgsProject.instance().addMapLayer(self.layer3_6)
            if path.exists(self.url + '/BATI/LIGNE_OROGRAPHIQUE.shp'):
                self.layer3_7 = QgsVectorLayer(self.url + "/BATI/LIGNE_OROGRAPHIQUE.shp", 'Ligne Orographique', 'ogr')    
                QgsProject.instance().addMapLayer(self.layer3_7)
            if path.exists(self.url + '/BATI/CONSTRUCTION_PONCTUELLE.shp'):
                self.layer3_8 = QgsVectorLayer(self.url + "/BATI/CONSTRUCTION_PONCTUELLE.shp", 'Construction Ponctuelle', 'ogr')  
                QgsProject.instance().addMapLayer(self.layer3_8)
            if path.exists(self.url + '/BATI/PYLONE.shp'):
                self.layer3_9 = QgsVectorLayer(self.url + "/BATI/PYLONE.shp", 'Pylone', 'ogr')            
                QgsProject.instance().addMapLayer(self.layer3_9)
            if path.exists(self.url + '/BATI/TOPONYMIE_BATI.shp'):
                self.layer3_10 = QgsVectorLayer(self.url + "/BATI/TOPONYMIE_BATI.shp", 'Toponymie bati ', 'ogr')
                QgsProject.instance().addMapLayer(self.layer3_10)
            if path.exists(self.url + '/BATI/DETAIL_HYDROGRAPHIQUE.shp'):
                self.layer3_11 = QgsVectorLayer(self.url + "/BATI/DETAIL_HYDROGRAPHIQUE.shp", 'Détails', 'ogr')
                QgsProject.instance().addMapLayer(self.layer3_11)
            #
            self.SymboBati()
           
           
        else:
            #
            if hasattr(self, 'layer3_1'):
                QgsProject.instance().removeMapLayer(self.layer3_1)
            if hasattr(self, 'layer3_2'):
                QgsProject.instance().removeMapLayer(self.layer3_2)
            if hasattr(self, 'layer3_3'):
                QgsProject.instance().removeMapLayer(self.layer3_3)
            if hasattr(self, 'layer3_4'):
                QgsProject.instance().removeMapLayer(self.layer3_4)
            if hasattr(self, 'layer3_5'):
                QgsProject.instance().removeMapLayer(self.layer3_5)
            if hasattr(self, 'layer3_6'):
                QgsProject.instance().removeMapLayer(self.layer3_6)
            if hasattr(self, 'layer3_7'):
                QgsProject.instance().removeMapLayer(self.layer3_7)
            if hasattr(self, 'layer3_8'):
                QgsProject.instance().removeMapLayer(self.layer3_8)
            if hasattr(self, 'layer3_9'):
                QgsProject.instance().removeMapLayer(self.layer3_9)
            if hasattr(self, 'layer3_10'):
                QgsProject.instance().removeMapLayer(self.layer3_10)
            if hasattr(self, 'layer3_11'):
                QgsProject.instance().removeMapLayer(self.layer3_11)
            #
            self.canvas.refresh()
           
    def SymboBati(self):
        #
        propsA = {'color': '#8A4B08', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0.3'}
        A = QgsFillSymbol.createSimple(propsA)
        propsB = {'color': '#424242', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0.3'}
        B = QgsFillSymbol.createSimple(propsB)
        propsC = {'color': '#088A85', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0.3'}
        C = QgsFillSymbol.createSimple(propsC)
        propsD = {'color': '#088A4B', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0.3'}
        D = QgsFillSymbol.createSimple(propsD)
        propsE = {'color': '#868A08', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        E = QgsFillSymbol.createSimple(propsE)
        #
        if hasattr(self, 'layer3_1'):
            self.layer3_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_1.id())
        if hasattr(self, 'layer3_2'):
            self.layer3_2.setRenderer(QgsSingleSymbolRenderer(B))  
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_2.id())
        if hasattr(self, 'layer3_3'):
            self.layer3_3.setRenderer(QgsSingleSymbolRenderer(C))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_3.id())
        if hasattr(self, 'layer3_4'):
            self.layer3_4.setRenderer(QgsSingleSymbolRenderer(D))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_4.id())
        if hasattr(self, 'layer3_5'):
            self.layer3_5.setRenderer(QgsSingleSymbolRenderer(E))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_5.id())
       
        #
        lineF = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#8A0886'})
        lineG = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#868A08'})
        #                                  
        if hasattr(self, 'layer3_6'):
            self.layer3_6.renderer().setSymbol(lineF)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_6.id())
        if hasattr(self, 'layer3_7'):
            self.layer3_7.renderer().setSymbol(lineG)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_7.id())
       
        #
        symbolH = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#FA5882', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolI = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#BDBDBD', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolJ = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#D358F7', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolK = QgsMarkerSymbol.createSimple({'name': 'square', 'color': '#8181F7', 'color_border' : '0,0,0', 'width_border': '0,3'})
        #                                      
        if hasattr(self, 'layer3_8'):
            self.layer3_8.renderer().setSymbol(symbolH)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_8.id())
        if hasattr(self, 'layer3_9'):
            self.layer3_9.renderer().setSymbol(symbolI)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_9.id())
        if hasattr(self, 'layer3_10'):
            self.layer3_10.renderer().setSymbol(symbolJ)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_10.id())
        if hasattr(self, 'layer3_11'):
            self.layer3_11.renderer().setSymbol(symbolK)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer3_11.id())
       
    def ouvHydro(self):
        #
        if self.dockwidget.checkBoxHydro.isChecked():
            #
            if path.exists(self.url + '/HYDROGRAPHIE/BASSIN_VERSANT_TOPOGRAPHIQUE.shp'):
                self.layer4_1 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/BASSIN_VERSANT_TOPOGRAPHIQUE.shp', 'Bassin Versant', 'ogr')  
                QgsProject.instance().addMapLayer(self.layer4_1)
            if path.exists(self.url + '/HYDROGRAPHIE/SURFACE_HYDROGRAPHIQUE.shp'):
                self.layer4_2 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/SURFACE_HYDROGRAPHIQUE.shp', "Surface hydrographique", 'ogr')  
                QgsProject.instance().addMapLayer(self.layer4_2)
            if path.exists(self.url + '/HYDROGRAPHIE/PLAN_D_EAU.shp'):
                self.layer4_3 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/PLAN_D_EAU.shp', "Plan d'eau", 'ogr')  
                QgsProject.instance().addMapLayer(self.layer4_3)
            if path.exists(self.url + '/HYDROGRAPHIE/COURS_D_EAU.shp'):
                self.layer4_4 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/COURS_D_EAU.shp', "Courd d'eau", 'ogr')
                QgsProject.instance().addMapLayer(self.layer4_4)
            if path.exists(self.url + '/HYDROGRAPHIE/LIMITE_TERRE_MER.shp'):
                self.layer4_5 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/LIMITE_TERRE_MER.shp', "Limite terre/mer", 'ogr')
                QgsProject.instance().addMapLayer(self.layer4_5)
            if path.exists(self.url + '/HYDROGRAPHIE/TRONCON_HYDROGRAPHIQUE.shp'):
                self.layer4_6 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/TRONCON_HYDROGRAPHIQUE.shp', "Troncon hydrograpĥique", 'ogr')  
                QgsProject.instance().addMapLayer(self.layer4_6)
            if path.exists(self.url + '/HYDROGRAPHIE/DETAIL_HYDROGRAPHIQUE.shp'):
                self.layer4_7 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/DETAIL_HYDROGRAPHIQUE.shp', "Détail hydrographique", 'ogr')
                QgsProject.instance().addMapLayer(self.layer4_7)
            if path.exists(self.url + '/HYDROGRAPHIE/NOEUD_HYDROGRAPHIQUE.shp'):
                self.layer4_8 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/NOEUD_HYDROGRAPHIQUE.shp', "Noeud hydrographique", 'ogr')
                QgsProject.instance().addMapLayer(self.layer4_8)
            if path.exists(self.url + '/HYDROGRAPHIE/TOPONYMIE_HYDROGRAPHIE.shp'):
                self.layer4_9 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/TOPONYMIE_HYDROGRAPHIE.shp', "Toponymie hydrographie", 'ogr')
                QgsProject.instance().addMapLayer(self.layer4_9)
            if path.exists(self.url + '/HYDROGRAPHIE/ENTITE_DE_TRANSITION.shp'):
                self.layer4_10 = QgsVectorLayer(self.url + '/HYDROGRAPHIE/ENTITE_DE_TRANSITION.shp', "Entité de transition", 'ogr')
                QgsProject.instance().addMapLayer(self.layer4_10)
            #
            self.SymboHydro()

        else:
            #
            if hasattr(self, 'layer4_1'):  
                QgsProject.instance().removeMapLayer(self.layer4_1)
            if hasattr(self, 'layer4_2'):  
                QgsProject.instance().removeMapLayer(self.layer4_2)
            if hasattr(self, 'layer4_3'):  
                QgsProject.instance().removeMapLayer(self.layer4_3)
            if hasattr(self, 'layer4_4'):  
                QgsProject.instance().removeMapLayer(self.layer4_4)
            if hasattr(self, 'layer4_5'):  
                QgsProject.instance().removeMapLayer(self.layer4_5)
            if hasattr(self, 'layer4_6'):  
                QgsProject.instance().removeMapLayer(self.layer4_6)
            if hasattr(self, 'layer4_7'):  
                QgsProject.instance().removeMapLayer(self.layer4_7)
            if hasattr(self, 'layer4_8'):  
                QgsProject.instance().removeMapLayer(self.layer4_8)
            if hasattr(self, 'layer4_9'):  
                QgsProject.instance().removeMapLayer(self.layer4_9)
            if hasattr(self, 'layer4_10'):  
                QgsProject.instance().removeMapLayer(self.layer4_10)
            #
            self.canvas.refresh()

    def SymboHydro(self):
        #
        propsA = {'color': '#CEF6F5', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        A = QgsFillSymbol.createSimple(propsA)
        propsB = {'color': '#A9E2F3', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        B = QgsFillSymbol.createSimple(propsB)
        propsC = {'color': '#2E64FE', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        C = QgsFillSymbol.createSimple(propsC)
        #
        if hasattr(self, 'layer4_1'):  
            self.layer4_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_1.id())
        if hasattr(self, 'layer4_2'):  
            self.layer4_2.setRenderer(QgsSingleSymbolRenderer(B))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_2.id())
        if hasattr(self, 'layer4_3'):  
            self.layer4_3.setRenderer(QgsSingleSymbolRenderer(C))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_3.id())
       
        #
        lineD = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#23C3F9'})
        lineE = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#002FFB'})
        lineF = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#054291'})
        #                                    
        if hasattr(self, 'layer4_4'):  
            self.layer4_4.renderer().setSymbol(lineD)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_4.id())
        if hasattr(self, 'layer4_5'):  
            self.layer4_5.renderer().setSymbol(lineE)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_5.id())
        if hasattr(self, 'layer4_6'):  
            self.layer4_6.renderer().setSymbol(lineF)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_6.id())
       
        #
        symbolG = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#DA81F5', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolH = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#08088A', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolI = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#084B8A', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolJ = QgsMarkerSymbol.createSimple({'name': 'square', 'color': '#084B8A', 'color_border' : '0,0,0', 'width_border': '0,3'})                                        
        #                            
        if hasattr(self, 'layer4_7'):            
            self.layer4_7.renderer().setSymbol(symbolG)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_7.id())
        if hasattr(self, 'layer4_8'):  
            self.layer4_8.renderer().setSymbol(symbolH)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_8.id())
        if hasattr(self, 'layer4_9'):  
            self.layer4_9.renderer().setSymbol(symbolI)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_9.id())
        if hasattr(self, 'layer4_10'):  
            self.layer4_10.renderer().setSymbol(symbolJ)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer4_10.id())


    def ouvLieuNomme(self):
        #
        if self.dockwidget.checkBoxLieuNomme.isChecked():
            #
            if path.exists(self.url + '/LIEUX_NOMMES/ZONE_D_HABITATION.shp'):
                self.layer5_1 = QgsVectorLayer(self.url + '/LIEUX_NOMMES/ZONE_D_HABITATION.shp', "Zone d'habitation", 'ogr')
                QgsProject.instance().addMapLayer(self.layer5_1)
            if path.exists(self.url + '/LIEUX_NOMMES/TOPONYMIE_LIEUX_NOMMES.shp'):
                self.layer5_2 = QgsVectorLayer(self.url + '/LIEUX_NOMMES/TOPONYMIE_LIEUX_NOMMES.shp', 'Toponyme lieux nommés', 'ogr')
                QgsProject.instance().addMapLayer(self.layer5_2)
            if path.exists(self.url + '/LIEUX_NOMMES/DETAIL_OROGRAPHIQUE.shp'):
                self.layer5_3 = QgsVectorLayer(self.url + '/LIEUX_NOMMES/DETAIL_OROGRAPHIQUE.shp', 'Détail orographique', 'ogr')
                QgsProject.instance().addMapLayer(self.layer5_3)
            if path.exists(self.url + '/LIEUX_NOMMES/LIEU_DIT_NON_HABITE.shp'):
                self.layer5_4 = QgsVectorLayer(self.url + '/LIEUX_NOMMES/LIEU_DIT_NON_HABITE.shp', 'Lieu dit non habité', 'ogr')
                QgsProject.instance().addMapLayer(self.layer5_4)
            #
            self.SymboLieuNomme()
           
           
        else:
            #
            if hasattr(self, 'layer5_1'):
                QgsProject.instance().removeMapLayer(self.layer5_1)
            if hasattr(self, 'layer5_2'):
                QgsProject.instance().removeMapLayer(self.layer5_2)
            if hasattr(self, 'layer5_3'):
                QgsProject.instance().removeMapLayer(self.layer5_3)
            if hasattr(self, 'layer5_4'):
                QgsProject.instance().removeMapLayer(self.layer5_4)
            #
            self.canvas.refresh()

    def SymboLieuNomme(self):
        #
        propsA = {'color': '#FF4000', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        A = QgsFillSymbol.createSimple(propsA)
        #
        if hasattr(self, 'layer5_1'):
            self.layer5_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer5_1.id())
       
        #
        symbolB = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#FFBF00', 'color_border' : '0,0,0', 'width_border': '0.3'})
        symbolC = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#BFFF00', 'color_border' : '0,0,0', 'width_border': '0.3'})
        symbolD = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#00FFFF', 'color_border' : '0,0,0', 'width_border': '0.3'})
        #  
        if hasattr(self, 'layer5_2'):                                    
            self.layer5_2.renderer().setSymbol(symbolB)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer5_2.id())
        if hasattr(self, 'layer5_3'):
            self.layer5_3.renderer().setSymbol(symbolC)  
            self.iface.layerTreeView().refreshLayerSymbology(self.layer5_3.id())
        if hasattr(self, 'layer5_4'):
            self.layer5_4.renderer().setSymbol(symbolD)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer5_4.id())
       
       

    def ouvOccupationDuSol(self):
        #
        if self.dockwidget.checkBoxOccupationDuSol.isChecked():
            #
            if path.exists(self.url + '/OCCUPATION_DU_SOL/ZONE_D_ESTRAN.shp'):
                self.layer6_1 = QgsVectorLayer(self.url + '/OCCUPATION_DU_SOL/ZONE_D_ESTRAN.shp', "Zonre d'estran", 'ogr')
                QgsProject.instance().addMapLayer(self.layer6_1)
            if path.exists(self.url + '/OCCUPATION_DU_SOL/ZONE_DE_VEGETATION.shp'):
                self.layer6_2 = QgsVectorLayer(self.url + '/OCCUPATION_DU_SOL/ZONE_DE_VEGETATION.shp', 'Zone de vegetation', 'ogr')
                QgsProject.instance().addMapLayer(self.layer6_2)
            if path.exists(self.url + '/OCCUPATION_DU_SOL/HAIE.shp'):
                self.layer6_3 = QgsVectorLayer(self.url + '/OCCUPATION_DU_SOL/HAIE.shp', 'Haie', 'ogr')
                QgsProject.instance().addMapLayer(self.layer6_3)
            #
            self.SymboSol()

           
        else:
            #
            if hasattr(self, 'layer6_1'):
                QgsProject.instance().removeMapLayer(self.layer6_1)
            if hasattr(self, 'layer6_2'):
                QgsProject.instance().removeMapLayer(self.layer6_2)
            if hasattr(self, 'layer6_3'):
                QgsProject.instance().removeMapLayer(self.layer6_3)
            #
            self.canvas.refresh()

    def SymboSol(self):
        #
        propsA = {'color': '#086A87', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        A = QgsFillSymbol.createSimple(propsA)
        propsB = {'color': '#298A08', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        B = QgsFillSymbol.createSimple(propsB)
        #
        if hasattr(self, 'layer6_1'):
            self.layer6_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer6_1.id())
        if hasattr(self, 'layer6_2'):
            self.layer6_2.setRenderer(QgsSingleSymbolRenderer(B))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer6_2.id())
           
        lineC = QgsLineSymbol.createSimple({'line_style': 'continu', 'color': '#ECF6CE'})
       
        if hasattr(self, 'layer6_3'):
            self.layer6_3.setRenderer(QgsSingleSymbolRenderer(lineC))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer6_3.id())

    def ouvServiceEtActivite(self):
        #
        if self.dockwidget.checkBoxServiceEtActivite.isChecked():
            #
            if path.exists(self.url + '/SERVICES_ET_ACTIVITES/ZONE_D_ACTIVITE_OU_D_INTERET.shp'):
                self.layer7_1 = QgsVectorLayer(self.url + '/SERVICES_ET_ACTIVITES/ZONE_D_ACTIVITE_OU_D_INTERET.shp', "Zone d'activité", 'ogr')
                QgsProject.instance().addMapLayer(self.layer7_1)
            if path.exists(self.url + '/SERVICES_ET_ACTIVITES/POSTE_DE_TRANSFORMATION.shp'):
                self.layer7_2 = QgsVectorLayer(self.url + '/SERVICES_ET_ACTIVITES/POSTE_DE_TRANSFORMATION.shp', 'Poste de transformation', 'ogr')
                QgsProject.instance().addMapLayer(self.layer7_2)
            if path.exists(self.url + '/SERVICES_ET_ACTIVITES/CANALISATION.shp'):
                self.layer7_3 = QgsVectorLayer(self.url + '/SERVICES_ET_ACTIVITES/CANALISATION.shp', 'Canalisation', 'ogr')
                QgsProject.instance().addMapLayer(self.layer7_3)
            if path.exists(self.url + '/SERVICES_ET_ACTIVITES/LIGNE_ELECTRIQUE.shp'):
                self.layer7_4 = QgsVectorLayer(self.url + '/SERVICES_ET_ACTIVITES/LIGNE_ELECTRIQUE.shp', 'Ligne électrique', 'ogr')
                QgsProject.instance().addMapLayer(self.layer7_4)
            if path.exists(self.url + '/SERVICES_ET_ACTIVITES/ERP.shp'):
                self.layer7_5 = QgsVectorLayer(self.url + '/SERVICES_ET_ACTIVITES/ERP.shp', 'ERP', 'ogr')
                QgsProject.instance().addMapLayer(self.layer7_5)
            if path.exists(self.url + '/SERVICES_ET_ACTIVITES/TOPONYMIE_SERVICES_ET_ACTIVITES.shp'):
                self.layer7_6 = QgsVectorLayer(self.url + '/SERVICES_ET_ACTIVITES/TOPONYMIE_SERVICES_ET_ACTIVITES.shp', 'Toponyme service', 'ogr')
                QgsProject.instance().addMapLayer(self.layer7_6)                      
            #
            self.SymboServiceEtActivite()
           
        else:
            #
            if hasattr(self, 'layer7_1'):
                QgsProject.instance().removeMapLayer(self.layer7_1)
            if hasattr(self, 'layer7_2'):
                QgsProject.instance().removeMapLayer(self.layer7_2)
            if hasattr(self, 'layer7_3'):
                QgsProject.instance().removeMapLayer(self.layer7_3)
            if hasattr(self, 'layer7_4'):
                QgsProject.instance().removeMapLayer(self.layer7_4)
            if hasattr(self, 'layer7_5'):
                QgsProject.instance().removeMapLayer(self.layer7_5)
            if hasattr(self, 'layer7_6'):
                QgsProject.instance().removeMapLayer(self.layer7_6)
            #
            self.canvas.refresh()

    def SymboServiceEtActivite(self):
        #
        propsA = {'color': '#958631', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        A = QgsFillSymbol.createSimple(propsA)
        propsB = {'color': '#133A6A', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        B = QgsFillSymbol.createSimple(propsB)
        #
        if hasattr(self, 'layer7_1'):
            self.layer7_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer7_1.id())
        if hasattr(self, 'layer7_2'):        
            self.layer7_2.setRenderer(QgsSingleSymbolRenderer(B))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer7_2.id())
       
        #
        lineC = QgsLineSymbol.createSimple({'line_style': 'dash', 'color': '#002FFB'})
        lineD = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#4F6988'})
        #
        if hasattr(self, 'layer7_3'):
            self.layer7_3.renderer().setSymbol(lineC)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer7_3.id())
        if hasattr(self, 'layer7_4'):
            self.layer7_4.renderer().setSymbol(lineD)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer7_4.id())
       
        #
        symbolE = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#FF4000', 'color_border' : '0,0,0', 'width_border': '0,3'})        
        symbolF = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#ECA713', 'color_border' : '0,0,0', 'width_border': '0,3'})
        #
        if hasattr(self, 'layer7_5'):
            self.layer7_5.renderer().setSymbol(symbolE)  
            self.iface.layerTreeView().refreshLayerSymbology(self.layer7_5.id())
        if hasattr(self, 'layer7_6'):                                      
            self.layer7_6.renderer().setSymbol(symbolF)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer7_6.id())

    def ouvTransport(self):
        #
        if self.dockwidget.checkBoxTransport.isChecked():
            if path.exists(self.url + '/TRANSPORT/EQUIPEMENT_DE_TRANSPORT.shp'):
                self.layer8_1 = QgsVectorLayer(self.url + '/TRANSPORT/EQUIPEMENT_DE_TRANSPORT.shp', 'Equipement de transport', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_1)
            if path.exists(self.url + '/TRANSPORT/AERODROME.shp'):
                self.layer8_2 = QgsVectorLayer(self.url + '/TRANSPORT/AERODROME.shp', 'Aerodrome', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_2)
            if path.exists(self.url + '/TRANSPORT/PISTE_D_AERODROME.shp'):
                self.layer8_3 = QgsVectorLayer(self.url + '/TRANSPORT/PISTE_D_AERODROME.shp', 'Piste aerodrome', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_3)
            if path.exists(self.url + '/TRANSPORT/TRONCON_DE_ROUTE.shp'):
                self.layer8_4 = QgsVectorLayer(self.url + '/TRANSPORT/TRONCON_DE_ROUTE.shp', 'Troncon de route', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_4)
            if path.exists(self.url + '/TRANSPORT/VOIE_FERREE_NOMMEE.shp'):
                self.layer8_5 = QgsVectorLayer(self.url + '/TRANSPORT/VOIE_FERREE_NOMMEE.shp', 'Voie ferree nommee', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_5)
            if path.exists(self.url + '/TRANSPORT/ITI_AUTRE.shp'):
                self.layer8_6 = QgsVectorLayer(self.url + '/TRANSPORT/ITI_AUTRE.shp', 'ITI autre', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_6)
            if path.exists(self.url + '/TRANSPORT/ROUTE_NUMEROTEE_OU_NOMMEE.shp'):
                self.layer8_7 = QgsVectorLayer(self.url + '/TRANSPORT/ROUTE_NUMEROTEE_OU_NOMMEE.shp', 'Route numerotee', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_7)
            if path.exists(self.url + '/TRANSPORT/TRONCON_DE_VOIE_FERREE.shp'):
                self.layer8_8 = QgsVectorLayer(self.url + '/TRANSPORT/TRONCON_DE_VOIE_FERREE.shp', 'Troncon de voie ferree', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_8)
            if path.exists(self.url + '/TRANSPORT/TRANSPORT_PAR_CABLE.shp'):
                self.layer8_9 = QgsVectorLayer(self.url + '/TRANSPORT/TRANSPORT_PAR_CABLE.shp', 'Transport par cable', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_9)
            if path.exists(self.url + '/TRANSPORT/POINT_DE_REPERE.shp'):
                self.layer8_10 = QgsVectorLayer(self.url + '/TRANSPORT/POINT_DE_REPERE.shp', 'Point de repere', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_10)
            if path.exists(self.url + '/TRANSPORT/NON_COMMUNICATION.shp'):
                self.layer8_11 = QgsVectorLayer(self.url + '/TRANSPORT/NON_COMMUNICATION.shp', 'Non communication', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_11)
            if path.exists(self.url + '/TRANSPORT/POINT_DU_RESEAU.shp'):
                self.layer8_12 = QgsVectorLayer(self.url + '/TRANSPORT/POINT_DU_RESEAU.shp', 'Point du reseau', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_12)
            if path.exists(self.url + '/TRANSPORT/TOPONYMIE_TRANSPORT.shp'):
                self.layer8_13 = QgsVectorLayer(self.url + '/TRANSPORT/TOPONYMIE_TRANSPORT.shp', 'Toponyme transport', 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_13)
            if path.exists(self.url + '/TRANSPORT/POINT_D_ACCES.shp'):
                self.layer8_14 = QgsVectorLayer(self.url + '/TRANSPORT/POINT_D_ACCES.shp', "Point d'accès", 'ogr')
                QgsProject.instance().addMapLayer(self.layer8_14)  
           
            #
            self.SymboTransport()

               
        else:

            if hasattr(self, 'layer8_1'):
                QgsProject.instance().removeMapLayer(self.layer8_1)
            if hasattr(self, 'layer8_2'):
                QgsProject.instance().removeMapLayer(self.layer8_2)
            if hasattr(self, 'layer8_3'):
                QgsProject.instance().removeMapLayer(self.layer8_3)
            if hasattr(self, 'layer8_4'):
                QgsProject.instance().removeMapLayer(self.layer8_4)
            if hasattr(self, 'layer8_5'):
                QgsProject.instance().removeMapLayer(self.layer8_5)
            if hasattr(self, 'layer8_6'):
                QgsProject.instance().removeMapLayer(self.layer8_6)
            if hasattr(self, 'layer8_7'):
                QgsProject.instance().removeMapLayer(self.layer8_7)
            if hasattr(self, 'layer8_8'):
                QgsProject.instance().removeMapLayer(self.layer8_8)
            if hasattr(self, 'layer8_9'):
                QgsProject.instance().removeMapLayer(self.layer8_9)
            if hasattr(self, 'layer8_10'):
                QgsProject.instance().removeMapLayer(self.layer8_10)
            if hasattr(self, 'layer8_11'):
                QgsProject.instance().removeMapLayer(self.layer8_11)
            if hasattr(self, 'layer8_12'):
                QgsProject.instance().removeMapLayer(self.layer8_12)
            if hasattr(self, 'layer8_13'):
                QgsProject.instance().removeMapLayer(self.layer8_13)
            if hasattr(self, 'layer8_14'):
                QgsProject.instance().removeMapLayer(self.layer8_14)
            #
            self.canvas.refresh()
   
    def SymboTransport(self):
        #
        propsA = {'color': '#E6E6E6', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        A = QgsFillSymbol.createSimple(propsA)
        propsB = {'color': '#CED8F6', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        B = QgsFillSymbol.createSimple(propsB)
        propsC = {'color': '#CEECF5', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        C = QgsFillSymbol.createSimple(propsC)
        #
        if hasattr(self, 'layer8_1'):
            self.layer8_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_1.id())
        if hasattr(self, 'layer8_2'):        
            self.layer8_2.setRenderer(QgsSingleSymbolRenderer(B))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_2.id())
        if hasattr(self, 'layer8_3'):
            self.layer8_3.setRenderer(QgsSingleSymbolRenderer(C))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_3.id())
       
        #
        lineD = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#A4A4A4'})
        lineE = QgsLineSymbol.createSimple({'line_style': 'dash', 'color': '#000000'})
        lineF = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#8A2908'})
        lineG = QgsLineSymbol.createSimple({'line_style': 'continue', 'color': '#DF0101', 'line_width': '1'})
        lineH = QgsLineSymbol.createSimple({'line_style': 'dash', 'color': '#581C01'})
        lineI = QgsLineSymbol.createSimple({'line_style': 'continu', 'color': '#424242'})
        #                                  
       
        if hasattr(self, 'layer8_4'):
            self.layer8_4.renderer().setSymbol(lineD)  
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_4.id())
        if hasattr(self, 'layer8_5'):    
            self.layer8_5.renderer().setSymbol(lineE)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_5.id())
        if hasattr(self, 'layer8_6'):
            self.layer8_6.renderer().setSymbol(lineF)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_6.id())
        if hasattr(self, 'layer8_7'):
            self.layer8_7.renderer().setSymbol(lineG)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_7.id())
        if hasattr(self, 'layer8_8'):
            self.layer8_8.renderer().setSymbol(lineH)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_8.id())
        if hasattr(self, 'layer8_9'):
            self.layer8_9.renderer().setSymbol(lineI)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_9.id())
       
        #
        symbolJ = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#F3F781', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolK = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#FFBF00', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolL = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#F7BE81', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolM = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#FA5858', 'color_border' : '0,0,0', 'width_border': '0,3'})
        symbolN = QgsMarkerSymbol.createSimple({'name': 'square', 'color': '#848484', 'color_border' : '0,0,0', 'width_border': '0,3'})
        #  
        if hasattr(self, 'layer8_10'):                                    
            self.layer8_10.renderer().setSymbol(symbolJ)  
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_10.id())
        if hasattr(self, 'layer8_11'):
            self.layer8_11.renderer().setSymbol(symbolK)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_11.id())
        if hasattr(self, 'layer8_12'):
            self.layer8_12.renderer().setSymbol(symbolL)  
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_12.id())
        if hasattr(self, 'layer8_13'):
            self.layer8_13.renderer().setSymbol(symbolM)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_13.id())
        if hasattr(self, 'layer8_14'):
            self.layer8_14.renderer().setSymbol(symbolN)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer8_14.id())
   
    def ouvZonereglementee(self):
        #
        if self.dockwidget.checkBoxZoneRegle.isChecked():
            #
            if path.exists(self.url + '//ZONES_REGLEMENTEES/FORET_PUBLIQUE.shp'):
                self.layer9_1 = QgsVectorLayer(self.url + '/ZONES_REGLEMENTEES/FORET_PUBLIQUE.shp', 'Foret publique', 'ogr')
                QgsProject.instance().addMapLayer(self.layer9_1)
            if path.exists(self.url + '/ZONES_REGLEMENTEES/PARC_OU_RESERVE.shp'):
                self.layer9_2 = QgsVectorLayer(self.url + '/ZONES_REGLEMENTEES/PARC_OU_RESERVE.shp', 'Parc ou reserve', 'ogr')
                QgsProject.instance().addMapLayer(self.layer9_2)
            if path.exists(self.url + '/ZONES_REGLEMENTEES/TOPONYMIE_ZONES_REGLEMENTEES.shp'):
                self.layer9_3 = QgsVectorLayer(self.url + '/ZONES_REGLEMENTEES/TOPONYMIE_ZONES_REGLEMENTEES.shp', 'Toponyme zone reglementee', 'ogr')
                QgsProject.instance().addMapLayer(self.layer9_3)
            #
            self.SymboZone()
           
        else:
            #
            if hasattr(self, 'layer9_1'):
                QgsProject.instance().removeMapLayer(self.layer9_1)
            if hasattr(self, 'layer9_2'):
                QgsProject.instance().removeMapLayer(self.layer9_2)
            if hasattr(self, 'layer9_3'):
                QgsProject.instance().removeMapLayer(self.layer9_3)
            #
            self.canvas.refresh()

    def SymboZone(self):
        #
        propsA = {'color': '#085B18', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        A = QgsFillSymbol.createSimple(propsA)
        propsB = {'color': '#E0F8E0', 'size':'1', 'color_border' : '0,0,0', 'width_border': '0'}
        B = QgsFillSymbol.createSimple(propsB)
        #
        if hasattr(self, 'layer9_1'):
            self.layer9_1.setRenderer(QgsSingleSymbolRenderer(A))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer9_1.id())
        if hasattr(self, 'layer9_2'):
            self.layer9_2.setRenderer(QgsSingleSymbolRenderer(B))
            self.iface.layerTreeView().refreshLayerSymbology(self.layer9_2.id())
       
        #
        symbolC = QgsMarkerSymbol.createSimple({'name': 'circle', 'color': '#A4A4A4', 'color_border' : '0,0,0', 'width_border': '0.3'})
        #
        if hasattr(self, 'layer9_3'):
            self.layer9_3.renderer().setSymbol(symbolC)
            self.iface.layerTreeView().refreshLayerSymbology(self.layer9_3.id())